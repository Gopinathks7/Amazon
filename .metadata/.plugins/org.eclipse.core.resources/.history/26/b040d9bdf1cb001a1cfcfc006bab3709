package com.common;

import java.util.concurrent.TimeUnit;

import org.apache.log4j.Logger;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.testng.ITestContext;
import org.testng.ITestResult;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Optional;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import com.generic.Property;
import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;

public class BaseTest implements AutomationConstants
{
	public Logger log;
	public WebDriver driver;
	public ExtentTest testReport;
	public static String strUrl;
	public static String un;
	public static String pw;
	public static String strHomePageURL;
	public static String loginPageURL;
	public static String strChromePath;
	public static String strGeckoPath;
	public static long timeout;
	public static ExtentReports eReport;
//	public static boolean loginRequired=true;
	//public static boolean logoutRequired=true;
	
	public BaseTest() 
	{
		log=Logger.getLogger(this.getClass());
		Logger.getRootLogger().setLevel(org.apache.log4j.Level.INFO);
	}
	
	@BeforeSuite
	public void initFrameWork()
	{
		log.info("Initializing ExtentReport");
		eReport=new ExtentReports(REPORT_PATH+REPORT_FILE);
		strUrl=Property.getPropertyValue(CONFIG_PATH+CONFIG_FILE, "URL");
		un=Property.getPropertyValue(CONFIG_PATH+CONFIG_FILE, "UN");
		pw=Property.getPropertyValue(CONFIG_PATH+CONFIG_FILE, "PW");
		strHomePageURL=Property.getPropertyValue(CONFIG_PATH+CONFIG_FILE, "HOME");
		loginPageURL=Property.getPropertyValue(CONFIG_PATH+CONFIG_FILE, "LOGIN");
		timeout=Long.parseLong(Property.getPropertyValue(CONFIG_PATH+CONFIG_FILE, "IMPLICIT"));
		strChromePath=DRIVER_PATH+CHROME_FILE;
		strGeckoPath=DRIVER_PATH+GECKO_FILE;
	}
	
	
	@Parameters({"browser"})
	@BeforeTest
	public void initBrowser(@Optional("Chrome") String  strBrowser)
{
		log.info("Execution started on Browser:"+strBrowser);
			}
	
	
	
	@Parameters({"Browser"})
	@BeforeClass
	public void initApplication(String  strBrowser){
		
		log.info("Browser:"+strBrowser);
		if(strBrowser.equalsIgnoreCase("chrome"))
		{
			System.setProperty(CHROME_KEY,strChromePath);
			driver=new ChromeDriver();
		}
		else{
			System.setProperty(GECKO_KEY,strGeckoPath);
			driver=new FirefoxDriver();
		}
		driver.get(strUrl);
		log.info("TimeOut:"+timeout);
		driver.manage().timeouts().implicitlyWait(timeout,TimeUnit.SECONDS);
	}
	
		
	@BeforeMethod
	public void preCondition(ITestContext test,ITestResult result)
	{
		testReport=eReport.startTest(test.getName());
//		if(loginRequired){
//			log.info("implicit login");
//			driver.navigate().to(url);
//			LoginPage loginPage=new LoginPage(driver);
//			loginPage.setUserName(un);
//			loginPage.setPassword(pw);
//			loginPage.clickLogin();
//			loginPage.verifyURLhas(homePageURL);

	
	}
	
	@AfterMethod
	public void postCondition(ITestResult result)
	{
		
		if(result.getStatus()==ITestResult.FAILURE)
		{
			testReport.log(LogStatus.FAIL,"Script failed check log for details");
		}
		else
		{
			testReport.log(LogStatus.PASS, "stepName", "details");
		}
		eReport.endTest(testReport);
	}
	
	
	
	@Parameters({"Browser"})
	@AfterClass
	public void cleanApplication(String  strBrowser){
		driver.quit();
	}

	
	@Parameters({"browser"})
	@AfterTest
	public void closeBrowser(String strBrowser){
		
		log.info("Execution completed on Browser:"+strBrowser);
	}
	
	@AfterSuite
	public void closeFrameWork()
	{
		log.info("Finalizing ExtentReport");
		eReport.flush();
	}
}
